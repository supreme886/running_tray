name: Build and Release

on:
  push:
    tags:
      - 'v*'  # ÂΩìÊé®ÈÄÅÁ±ª‰ººv1.0.0ÁöÑÊ†áÁ≠æÊó∂Ëß¶Âèë

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Qt
      uses: jurplel/install-qt-action@v3
      with:
        qt-version: '6.5.0'
        arch: 'win64_msvc2019_64'
        
    - name: Install CMake
      uses: lukka/get-cmake@latest
      
    - name: Install NSIS
      run: choco install nsis -y
      
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      
    - name: Build and package
      shell: cmd
      run: scripts\package.bat
      
    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-release
        path: |
          ./*_setup.exe
          ./*_release.zip

  build-macos:
    runs-on: macos-latest  # ‰ΩøÁî®ÊúÄÊñ∞ÁöÑ macOS ËøêË°åÂô®
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Qt
      uses: jurplel/install-qt-action@v3
      with:
        qt-version: '6.5.0'
        arch: 'clang_64'
        target: 'desktop'
        
    - name: Install CMake
      uses: lukka/get-cmake@latest
      
    - name: Make build script executable
      run: chmod +x scripts/build_dmg.sh
      
    - name: Build DMG
      run: ./scripts/build_dmg.sh
      env:
        GITHUB_REF_NAME: ${{ github.ref_name }}
        CMAKE_OSX_ARCHITECTURES: "x86_64"  # Âº∫Âà∂ÊûÑÂª∫ x86_64
        
    - name: Upload macOS Artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-release
        path: ./*.dmg

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          qt6-base-dev \
          qt6-tools-dev \
          qt6-tools-dev-tools \
          libgl1-mesa-dev \
          libxkbcommon-dev \
          libxcb-xinerama0-dev \
          libxcb-cursor-dev \
          fakeroot \
          dpkg-dev
        
    - name: Make build script executable
      run: chmod +x scripts/build_deb.sh
      
    - name: Build DEB
      run: ./scripts/build_deb.sh
      env:
        GITHUB_REF_NAME: ${{ github.ref_name }}
        
    - name: Upload Linux Artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-release
        path: ./*.deb

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Download Windows Artifact
      uses: actions/download-artifact@v4
      with:
        name: windows-release
        path: ./windows/
        
    - name: Download macOS Artifact
      uses: actions/download-artifact@v4
      with:
        name: macos-release
        path: ./macos/
        
    - name: Download Linux Artifact
      uses: actions/download-artifact@v4
      with:
        name: linux-release
        path: ./linux/
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          ## üöÄ Release ${{ github.ref_name }}
          
          ### üì¶ Downloads
          - **Windows**: running-tray_windows_x64.zip
          - **macOS**: Running-Tray-${{ github.ref_name }}.dmg (x86_64, compatible with Intel and Apple Silicon Macs)
          - **Linux**: running-tray_${{ github.ref_name }}_amd64.deb (Ubuntu/Debian)
          
          ### üîß Installation
          **Windows**: Extract the zip file and run the executable
          **macOS**: Download the DMG, open it, and drag the app to Applications folder
          **Linux**: Download the DEB file and install with `sudo dpkg -i running-tray_*.deb`
          
          ### üìã Compatibility
          - **Intel Mac**: Native performance
          - **Apple Silicon Mac**: Runs via Rosetta 2 with excellent performance
          - **Linux**: Ubuntu 20.04+ / Debian 11+
        files: |
          ./windows/*_setup.exe
          ./windows/*_release.zip
          ./macos/*.dmg
          ./linux/*.deb
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}